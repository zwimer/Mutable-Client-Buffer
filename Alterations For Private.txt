For private buffers, the arguments are different so the module has to be changed.

virtual EModRet OnChanBufferStarting(CChan& Chan, CClient& Client);
become 
virtual EModRet OnPrivBufferStarting(CQuery& Query, CClient& Client);


Instead of a CChan we are given a CQuery. The functionality of our module
shouldn't change too much since the Query also has a CBuffer and similar functions
to interact with it. However, getting the hostmask would be more difficult.

What we have:
	CString format = ch.FindNick(cli.GetNick())->GetHostMask();

When changed:
	Queries have a private variable 
	CIRCNetwork* m_pNetwork;

	We can access this in a similiar manner to the following:
	The following is a hack, but it will work for now

		template<typename Tag, typename Tag::type M>
		struct Rob { 
		  friend typename Tag::type get(Tag) {
			return M;
		  }
		};

		class Point
		{
		public:
			Point( void ) : m_i(0) {}
			void PrintPrivate( void ){cout << m_i << endl; }
		private:
			int m_i;
		};

		struct Point_f { 
		  typedef int Point::*type;
		  friend type get(Point_f);
		};
		template struct Rob<Point_f, &Point::m_i>;

		void ChangePrivate ( Point &i ) 
		{  
			i.*get(Point_f()) = 4;
		}


	CIRCNetwork has a function GetIRCNick()
	From there we can do: ...GetIRCNick()->GetHostMask(); 
