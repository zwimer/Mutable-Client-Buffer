We will have internal struct: Msg
	struct Msg {
		int when;
		CString what;
	}

We will have internal struct: lineWrapper
	Overload < to check a.l.time < b.l.time
	struct lineWrapper {
		lineWrapper(line a) : l(a) {}
		lineWrapper(Msg, int (ip) );
		line l;
	}

We will have member data structure:
	std::map < CString (who), std::vector<const Msg> > sent

We will override 2 functions:
	OnUserMessage
	OnChanBufferStarting

OnUserMessage(who, what):
	sent[who] = new Msg( <current time> , what );



-- Done up to here (untested)



OnChanBufferStarting(chan):

	// Get rep exposure of chan
	CBuf & buf = chan.buf;
	
	// Local data structures
	std::set< lineWrapper > newBuf;
	
	// Default my ip
	std::stiring me = <my user name, find somehow?>
	std::string myIP = <something... maybe a c++ function, maybe "">

	// Loop through buffer to populate data structures
	for (auto line : buf) {
		newBuf.insert( line );
		if (line.who == me)	myIp = line.ip;
	}

	// Add our msgs to data structures
	for (auto i : sent) {
		newBuf.insert( lineWrapper(i, myIP) );
	}

	// Clear the old buffer
	buf.clear();

	// Recreate buf
	for (auto i : newBuf) {
		buf.addLine( i );
	}

